---
/**
 * YouTube Thumbnail Extractor (Using Cursor)
 *
 * PURPOSE:
 * - Single-file solution that serves both UI and API functionality
 * - Extracts YouTube video IDs from various URL formats and redirects to max resolution thumbnails
 *
 * URL STRUCTURE:
 * - UI: https://chan.dev/get-thumbnail (shows form)
 * - API: https://chan.dev/get-thumbnail?url=YOUTUBE_URL (redirects to thumbnail)
 *
 * SUPPORTED YOUTUBE URL FORMATS:
 * - https://www.youtube.com/watch?v=VIDEO_ID
 * - https://youtu.be/VIDEO_ID
 * - https://www.youtube.com/embed/VIDEO_ID
 *
 * KEY IMPLEMENTATION DETAILS:
 * - Uses `export const prerender = false` to enable server-side rendering
 * - Single regex pattern handles all YouTube URL formats
 * - Redirects to https://img.youtube.com/vi/VIDEO_ID/maxresdefault.jpg
 * - Includes 1-hour cache headers for performance
 *
 * DISCUSSION HISTORY:
 * - Originally implemented as separate API route + UI page
 * - Converted to single-file solution per user preference
 * - Simplified regex patterns from 3 separate patterns to 1 consolidated pattern
 * - Removed unnecessary variables and TypeScript casting
 * - Reduced code by ~26% while maintaining identical functionality
 *
 * IMPORTANT NOTES FOR EDITING:
 * - Frontmatter logic runs before HTML rendering - API responses must be returned early
 * - The `hasUrlParam` check determines whether to show UI or act as API
 * - Error responses use JSON format for API consistency
 * - Form uses optional chaining (?.) to handle potential null elements
 * - TypeScript casting needed for input element value access
 * - Cache headers help with performance but can be adjusted as needed
 *
 * DEPLOYMENT:
 * - Works with Cloudflare Pages (hybrid output mode)
 * - No additional dependencies required
 * - Ready for production deployment
 */

import Layout from '#layouts/Layout.astro'

export const prerender = false

// Handle API requests
const url = Astro.url
const hasUrlParam = url.searchParams.has('url')

if (hasUrlParam) {
	const videoUrl = url.searchParams.get('url')

	if (!videoUrl) {
		return new Response(
			JSON.stringify({
				error:
					'Missing video URL parameter. Use ?url=https://www.youtube.com/watch?v=VIDEO_ID',
			}),
			{
				status: 400,
				headers: {'Content-Type': 'application/json'},
			}
		)
	}

	const videoId = extractYouTubeVideoId(videoUrl)

	if (!videoId) {
		return new Response(
			JSON.stringify({
				error:
					'Invalid YouTube URL. Could not extract video ID.',
			}),
			{
				status: 400,
				headers: {'Content-Type': 'application/json'},
			}
		)
	}

	return new Response(null, {
		status: 302,
		headers: {
			'Location': `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`,
			'Cache-Control': 'public, max-age=3600',
		},
	})
}

function extractYouTubeVideoId(url: string): string | null {
	// Single regex pattern that handles all YouTube URL formats
	const match = url.match(
		/(?:youtube\.com\/(?:watch\?v=|embed\/)|youtu\.be\/)([^&\n?#]+)/
	)
	return match ? match[1] : null
}
---

<Layout>
	<div class="max-w-2xl mx-auto p-6">
		<h1 class="text-3xl font-bold mb-6">
			YouTube Thumbnail Extractor
		</h1>

		<div class="bg-gray-50 p-6 rounded-lg mb-6">
			<h2 class="text-xl font-semibold mb-4">How to use:</h2>
			<p class="mb-2">
				Add your YouTube URL as a query parameter:
			</p>
			<code class="bg-gray-200 p-2 rounded block mb-4">
				https://chan.dev/get-thumbnail?url=https://www.youtube.com/watch?v=SPwPpsXpZfg
			</code>
			<p class="text-sm text-gray-600">
				This will redirect you to the maximum resolution
				thumbnail for that video.
			</p>
		</div>

		<div class="bg-blue-50 p-6 rounded-lg">
			<h2 class="text-xl font-semibold mb-4">Test it:</h2>
			<form id="thumbnailForm" class="space-y-4">
				<div>
					<label
						for="videoUrl"
						class="block text-sm font-medium mb-2"
					>
						YouTube URL:
					</label>
					<input
						type="url"
						id="videoUrl"
						name="videoUrl"
						placeholder="https://www.youtube.com/watch?v=SPwPpsXpZfg"
						class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
						required
					/>
				</div>
				<button
					type="submit"
					class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
				>
					Get Thumbnail
				</button>
			</form>
		</div>

		<div class="mt-8">
			<h2 class="text-xl font-semibold mb-4">
				Supported URL formats:
			</h2>
			<ul class="list-disc list-inside space-y-2 text-sm">
				<li>
					<code>https://www.youtube.com/watch?v=VIDEO_ID</code>
				</li>
				<li><code>https://youtu.be/VIDEO_ID</code></li>
				<li>
					<code>https://www.youtube.com/embed/VIDEO_ID</code>
				</li>
			</ul>
		</div>
	</div>

	<script>
		document
			.getElementById('thumbnailForm')
			?.addEventListener('submit', function (e) {
				e.preventDefault()
				const videoUrl = (
					document.getElementById(
						'videoUrl'
					) as HTMLInputElement
				)?.value
				if (videoUrl) {
					window.open(
						`/get-thumbnail?url=${encodeURIComponent(videoUrl)}`,
						'_blank'
					)
				}
			})
	</script>
</Layout>
