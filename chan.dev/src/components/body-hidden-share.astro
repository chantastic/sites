---
import type * as POSTS from "#content/posts/_posts";
import * as ASTRO from "astro/components"
import * as COLLECTION from "#modules/collection";
import Prose from "#components/prose.astro";
import CrossPostDetails from "#components/body-hidden-share-cross-post-details.astro";
import SocialPostDetails from "#components/body-hidden-share-social-post-details.astro";
import { url } from "#modules/site";

interface Props {
  entry?: POSTS.CollectionEntry
}

const { entry } = Astro.props;
const maybeContent = await entry?.render();
---

<Prose>
  {
    entry && (
        <>
          <h2>Publications</h2>
          <CrossPostDetails />
          <h2>Social</h2>
          <SocialPostDetails entry={entry} />
          <h2>Metadata</h2>
          <dl>
            <dt>Title: </dt>
            <dd>{entry.data.title}</dd>
            <dt>Slug: </dt>
            <dd>{entry.slug}</dd>
            <dt>Canonical url: </dt>
            <dd>{url(entry.slug)}</dd>
            {entry.data.publishDate &&
              <dt>publishDate: </dt>
              <dd>{COLLECTION.formatDate(entry.data.publishDate)}</dd>
            }
            {entry.data.tags && 
              <dt>tags: </dt>
              <dd>{(entry.data.tags).map((tag: string, i: number) => <>{i !== 0 && ", "}<code>{tag}</code></>)} <em>(specific)</em></dd>
              <dd>{['web-development', 'coding', 'productivity', 'career', 'react', 'tutorial'].map((tag: string, i: number) => <>{i !== 0 && ", "}<code>{tag}</code></>)} <em>(generic)</em></dd>
            }
            {entry.data.tldr && 
              <dt>tl;dr: </dt>
              <dd><pre>{entry.data.tldr}</pre></dd>
            }
          </dl>

          <details>
            <summary><span class="font-black">Raw markdown</span></summary>
            <ASTRO.Code code={entry.body} lang="markdown" wrap />
          </details>

          {maybeContent?.headings && 
            <details>
              <summary><span class="font-black">Headings as video timpestamps</span></summary>
              <pre>{[{ text: entry.data.title }, ...maybeContent.headings].map((heading) => `00:00 ${heading.text}\n`)}</pre>
            </details>
          }
        </>
    )
  }
</Prose>

<style is:global>
  #share {
    box-sizing: border-box;
    padding: 1rem;
    background-color: #f0f0f0;
  }
  #share details[open] {
    padding: 0 1rem 1rem;
    background-color: rgb(255 255 255 / 80%);
  }
  #share details[open] > summary {
    margin-inline-start: -1rem;
  }
</style>

<script>
  main();

  function removeHeadingLinks() {
    const nodes = document.querySelectorAll(".heading--direct-link");

    nodes.forEach((node) => node.remove());
  }
    
  function swapSourceToPNG() {
    if (import.meta.env.PROD) {
      let nodes = document.querySelectorAll("img");
      nodes.forEach(
        (node) => {
          if (node.src.endsWith(".webp")) {
            node.src = node.src.replace(/_\S{1,10}\.webp$/, ".png")
          }
        }
      );
    }
  }
  
  function main() {
    addEventListener("hashchange", handlePostLoad);
    addEventListener("DOMContentLoaded", handlePostLoad);
  } 

  function handlePostLoad() {
    if (window.location.hash === "#share") {
      removeHeadingLinks();
      swapSourceToPNG();
    }
  }
</script>